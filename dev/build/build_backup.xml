<project name="alarm" default="compile" xmlns:sonar="antlib:org.sonar.ant">
  <property name="pack.name" value="alarm"/>
  <property name="pack.version" value="2-0-0"/>
  <!-- Attention! pack.dir have to be under tmp-dir because the actual build is done there --> 
  <property name="pack.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/alarm_module/dev"/>
  <!-- ENIQ Jars -->
  <property name="eniq.common_utilities.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/common_utilities/build/common_utilities/"/>
 <property name="eniq.engine.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/engine/build/engine/"/>
 <property name="eniq.parser.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/parser/build/parser/"/>
 <property name="eniq.repository.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/repository/build/repository/"/>
  <!-- 3PP Jars -->
  <!-- ANT JAR with no version number -->
  <property name="3pp.commons_codec.dir" value="/proj/eiffel013_config_fem6s11/3pp/apache/comm_codec/v1_10/prod"/>
  <property name="3pp.httpclient.dir" value="/proj/eiffel013_config_fem6s11/3pp/apache/comm_httpclient/v4_5_3/prod"/>
  <property name="3pp.httpcore.dir" value="/proj/eiffel013_config_fem6s11/3pp/apache/comm_httpclient/v4_5_3/prod"/>
  <property name="3pp.commons_logging.dir" value="/proj/eiffel013_config_fem6s11/3pp/apache/comm_logging/v1_2/prod"/>
  <property name="3pp.velocity.dir" value="/proj/eiffel013_config_fem6s11/3pp/apache/jakarta_velocity/v1_7/prod"/>
  <property name="3pp.jersey.dir" value="/proj/eiffel013_config_fem6s11/3pp/jersey"/>
  <target name="precompile"/>
  
  <target name="compile">
    <mkdir dir="${pack.dir}/classes"/>
    <javac srcdir="${pack.dir}/src" destdir="${pack.dir}/classes" failonerror="true" debug="on" optimize="off" deprecation="off">
<compilerarg value="-Xlint:all" />
      <classpath>
        <pathelement path="${classpath}"/>
		<pathelement path="${eniq.repository.dir}/repository.jar"/>
      	<fileset dir="${eniq.common_utilities.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 <fileset dir="${eniq.engine.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 <fileset dir="${eniq.parser.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 <fileset dir="${3pp.commons_codec.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 <fileset dir="${3pp.httpclient.dir}">
				<include name="**/httpclient-4.5.3.jar"/>
		 </fileset>
	       	<fileset dir="${3pp.httpcore.dir}">
      				<include name="**/httpcore-4.4.7.jar"/>
      		 </fileset>
		 <fileset dir="${3pp.commons_logging.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 <fileset dir="${3pp.velocity.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 		 <fileset dir="${3pp.jersey.dir}">
				<include name="**/*.jar"/>
		 </fileset>
      </classpath>
    </javac>
  </target>
	<target name="postcompile">
	  <mkdir dir="${pack.dir}/connectionlib"/>
	  <jar destfile="${pack.dir}/connectionlib/ETLCAlarm_b${build.number}.jar">
	    <fileset dir="${pack.dir}/classes">
	    	<include name="**/connectionlib/*"/>
	    </fileset>
	  </jar>
	</target>
    <!-- ========= Define the main properties of this project ========= -->
    <property name="src.dir" value="src" />
    <property name="build.dir" value="target" />
    <property name="classes.dir" value="${build.dir}/classes" />
    <!-- Define the SonarQube global properties (the most usual way is to pass these properties via the command line) -->
    <property name="sonar.host.url" value="https://sonarqube.lmera.ericsson.se" />
    <!-- Define the Sonar properties -->
    <property name="sonar.projectKey" value="sonarqube-scanner-alarm_module" />
    <property name="sonar.projectName" value="Eniq Alarm_module" />
    <property name="sonar.projectVersion" value="1.0" />
    <property name="sonar.sources" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/alarm_module/dev/src" />
    <property name="sonar.java.binaries" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/alarm_module" />
    <property name="sonar.sourceEncoding" value="UTF-8" />
    <property name="sonar.login" value="b140730794b2b53dc841840498358c11213d3ba9" />
    <property name="sonar.projectBaseDir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_alarm_build/alarm_module" />
    <target name="compile_sonar">
        <javac srcdir="${pack.dir}/src" destdir="${pack.dir}/classes" fork="true" debug="true" includeAntRuntime="false" />
    </target>
    <!-- ========= Define SonarQube Scanner for Ant Target ========= -->
    <target name="sonar">
        <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
            <!-- Update the following line, or put the "sonar-ant-task-*.jar" file in your "$HOME/.ant/lib" folder -->
            <classpath path="/proj/esjkadm100/Sonar/sonarqube-ant-task-2.7.0.1612.jar" />
        </taskdef>
        <!-- Execute SonarQube Scanner for Ant Analysis -->
        <sonar:sonar />
    </target>
    <target name="clean">
        <delete dir="${pack.dir}/classes"/>
    </target>
    <!-- ========= The main target "all" ========= -->
    <target name="all_sonar" depends="sonar,clean" />
<target name="sonarQualityCheck" description="SonarQube Quality Gate check"> 
	 <exec executable="/bin/sh" outputproperty="qualitySleep"> 
		 <arg value="-c" /> 
		 <arg value="sleep 60" /> 
	 </exec>
	<exec executable="curl" outputproperty="sonarreturnCode">
		<arg value="-o" />
		<arg value="/proj/esjkadm100/Sonar/sonarOut.txt" />
		<arg value="-k" />
        <arg value="-u" />
        <arg value="${sonar.login}:" />
        <arg value="https://sonarqube.lmera.ericsson.se/api/qualitygates/project_status?projectKey=${sonar.projectKey}" />
    </exec>
    <exec executable="/bin/sh" outputproperty="sonarCode">
        <arg value="-c" />
        <arg value="/proj/eiffel013_config_fem6s11/tools/sonarQualityGateCheck.sh" />
    </exec>
    <echo message="Quality report returned ${sonarCode}"/>
    <condition property="qualityMatch">
        
            <equals arg1="${sonarCode}" arg2="ERROR"/>
        
    </condition>
    <fail if="qualityMatch" message="Quality check did not pass, hence marking build as failed!!!."/>
</target>
</project>